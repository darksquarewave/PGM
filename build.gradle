group 'java.org.pgm'
version '1.0.0'

buildscript {
  repositories {
    jcenter()
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
  }
  dependencies {
    classpath 'me.champeau.gradle:jmh-gradle-plugin:0.4.5'
  }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'me.champeau.gradle.jmh'

assert JavaVersion.current().isJava8Compatible()

repositories {
  mavenCentral()
}

configurations {
  checkerFrameworkAnnotatedJDK {
    description = 'a copy of JDK classes with Checker Framework type qualifers inserted'
  }
}

dependencies {
  checkerFrameworkAnnotatedJDK "org.checkerframework:${jdkVersion}:${checkerFrameworkVersion}"

  compile "org.checkerframework:checker:${checkerFrameworkVersion}"
  compile "org.checkerframework:checker-qual:${checkerFrameworkVersion}"

  compile "org.apache.commons:commons-lang3:${commonsLangVersion}"

  jmh "org.openjdk.jmh:jmh-core:${jmhVersion}"
  jmh "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"

  testCompile group: 'junit', name: 'junit', version: junitVersion
}

tasks.withType(JavaCompile).all { JavaCompile compile ->
  if (name != 'jmhCompileGeneratedClasses') {
    compile.doFirst {
      compile.options.compilerArgs = [
          '-processor', 'org.checkerframework.checker.nullness.NullnessChecker',
          // uncomment to turn Checker Framework errors into warnings
          //'-Awarns',
          "-Xbootclasspath/p:${configurations.checkerFrameworkAnnotatedJDK.asPath}",
      ]
    }
  }
}

checkstyle {
  configFile file('config/checkstyle/checkstyle.xml')
}

tasks.withType(FindBugs) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
  excludeFilter = file("config/findbugs/exclude.xml")
}

pmd {
  ruleSetFiles = files("config/pmd/pmd.xml")
}

task wrapper(type: Wrapper) {
  gradleVersion = gradleWrapperVersion
}